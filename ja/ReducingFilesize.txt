! ファイル サイズの削減 / Reducing File Size

!! Unity はインポートされたすべてのアセットを後処理します。

Unity は常にインポートされたファイルを後処理するので、jpg ではなく、マルチレイヤー化 psd ファイルとしてファイルを格納すると、配備するプレイヤーのサイズの差が一切なくなります。 作業を楽にするため、作業している形式 (例：.mb ファイル、.psd ファイル .tiff ファイル) で保存します。


!! Unity は未使用のアセットを除去します。

プロジェクト フォルダのアセットの数は、ビルド プレイヤーのサイズには影響__しません__。 Unity は非常にスマートなため、ゲーム内で使用されているアセットとそうでないアセットを検出できます。 Unity は、ゲームの作成前にアセットへのすべての参照に従い、ゲームに含める必要のあるアセットのリストを生成します。 従って、プロジェクト フォルダで未使用のアセットを安全に保存できます。


!! Unity は使用されているファイル サイズの概要を出力します。

Unity は、プレイヤーの作成終了後、ほとんどのファイル サイズを使用しているアセットのタイプを出力し、ビルド内に含まれていたアセットを出力します。これを確認するにはエディターのコンソールログをご覧ください: コンソールウィンドウの ^^Open Editor Log^^ ボタン (または ^^Window -> Console^^ ).

Attach:FileSizeOptimization.png

ファイルヘッダはアセットではありませんが、リソースアセットなどのように、アセットのための参照や設定を維持にするのに必要なデータを表します。言い換えると、ファイルに含まれる生データのコンテンツから独立した余分なデータです。これは通常、小さな割合を占める程度ですが、もし大きな値がある場合は Resources フォルダにアセットがあるかチェックします。そういうケースでは一部または全部のファイルをこのフォルダから移動してみて、それによりファイルヘッダが減少するか確認して下さい。 [[AssetBundlesIntro | アセット バンドル]] を使用することでアセットを動的にロードするように切り替えることが出来ます。

!! テクスチャ サイズの最大化

多くの場合、テクスチャはビルド内のほとんどのスペースを消費します。 最初に、圧縮テクスチャ形式  (DXT($$Desktop platforms$$) または PVRTC) を使用できる場所で使用します。

サイズが減らない場合は、テクスチャのサイズを減らしてみてください。 ここでのポイントは、実際のソースの内容を編集する必要がないということです。 プロジェクト ビューでテクスチャを選択し、インポート設定で''Max Texture Size''を設定します。 $$Scene View$$ で見た目が悪くなり始めるまで、テクスチャを使用するオブジェクトを拡大し、''Max Texture Size''を調整するのはよい考えです。

Attach:FileSizeOptimizationTexture.png\\
''Max Texture Size を変更しても、テクスチャ アセットには影響せず、ゲーム内の解像度のみに影響します''


!!! ''テクスチャはどのくらいのメモリを消費しますか?''

!Desktop!
>>desktop<<
||__Compression__      ||__メモリの消費__ ||
||``RGB Compressed DXT1``  ||0.5 bpp (バイト/ピクセル)  ||
||``RGBA Compressed DXT5`` ||1 bpp ||
||``RGB 16bit``            ||2 bpp ||
||``RGB 24bit``            ||3 bpp ||
||``Alpha 8bit``           ||1 bpp ||
||``RGBA 16bit``           ||2 bpp ||
||``RGBA 32bit``           ||4 bpp ||
>><<
!iOS!
>>ios<<
||__Compression__      ||__メモリの消費__ ||
||``RGB Compressed PVRTC 2 bits``||0.25 bpp (バイト/ピクセル)  ||
||``RGBA Compressed PVRTC 2 bits`` ||0.25 bpp ||
||``RGB Compressed PVRTC 4 bits`` ||0.5 bpp ||
||``RGBA Compressed PVRTC 4 bits`` ||0.5 bpp ||
||``RGB 16bit``            ||2 bpp ||
||``RGB 24bit``            ||3 bpp ||
||``Alpha 8bit``           ||1 bpp ||
||``RGBA 16bit``           ||2 bpp ||
||``RGBA 32bit``           ||4 bpp ||
>><<
!Android!
>>android<<
||__Compression__      ||__メモリの消費__ ||
||``RGB Compressed DXT1``  ||0.5 bpp (バイト/ピクセル)  ||
||``RGBA Compressed DXT5`` ||1 bpp ||
||``RGB Compressed ETC1`` ||0.5 bpp ||
||``RGB Compressed PVRTC 2 bits``||0.25 bpp (バイト/ピクセル)  ||
||``RGBA Compressed PVRTC 2 bits`` ||0.25 bpp ||
||``RGB Compressed PVRTC 4 bits`` ||0.5 bpp ||
||``RGBA Compressed PVRTC 4 bits`` ||0.5 bpp ||
||``RGB 16bit``            ||2 bpp ||
||``RGB 24bit``            ||3 bpp ||
||``Alpha 8bit``           ||1 bpp ||
||``RGBA 16bit``           ||2 bpp ||
||``RGBA 32bit``           ||4 bpp ||
>><<
テクスチャの合計サイズの求め方: 幅 * 高さ * bpp。
ミニマップがある場合は 33% を追加します。

デフォルトでは、Unity はインポート時にすべてのテクスチャを圧縮します。 ワークフローをより高速にするため、^^Preferences^^ でこれをオフにできます。 ゲーム作成時、圧縮されていないすべてのテクスチャが圧縮されます。



!! メッシュおよびアニメーション サイズの最大化

ゲーム ファイルでの使用スペースを減らすよう、[[class-Mesh | Meshes]] およびインポートされたアニメーション クリップを圧縮できます。 メッシュ インポート設定で圧縮をオンにできます。

ゲーム ファイルでの使用スペースを減らすよう、[[class-Mesh | Meshes]] およびインポートされたアニメーション クリップを圧縮できます。 モデルで許容可能な圧縮のレベルを試してみてください。

メッシュ圧縮は小さいデータ ファイルしか生成せず、ランタイムで使用するメモリは少なくなります。 アニメーション''Keyframe reduction''は、小さいデータ ファイルしか生成せず、ランタイムで使用するメモリは少なくなり、一般に、常にキーフレーム削減を使用します。

また、メッシュで法線および/または接線を格納しないようにし、ランタイム時にゲーム ビルドとメモリにスペースを保存するよう選択できます。 これは、メッシュ インポート設定の''Tangent Space Generation''ドロップダウンで設定できます。 経験則:
* 接線は、法線マッピングに使用されます。 * 法線マッピングを使用しない場合は、おそらくこれらのメッシュで接線を格納する必要はありません。
* 接線は、ライティングに使用されます。 メッシュの一部でリアルタイムのライティングを使用しない場合は、おそらくこれらに法線を格納する必要はありません。


!! プレイヤーに含まれている dll を減らす

プレイヤー (デスクトップ、Android または iOS) $$System.dll$$ または $$System.Xml.dll$$ に依存しないことは重要です。  Unity は、プレイヤー インストールで $$System.dll$$ または $$System.Xml.dll$$ を含みません。  つまり、Xml または、$$System.dll$$ にある一部の汎用コンテナを使用したい場合、必要な dll はプレイヤーに含まれます。  これは通常、ダウンロード サイズに 1mb を追加しますが、これは明らかにプレイヤーの配布にはあまりよくないので、回避する必要があります。  Xml ファイルを構文解析する必要がある場合、[[Attach:Mono.Xml.zip|Mono.Xml.zip]] などのより小さい xml ライブラリを使用できます。  ほとんどの汎用コンテナは、mscorlib に含まれますが、Stack<> やその他の幾つかは、$$System.dll$$ に含まれます。 そのため、本当にこれらを回避したいと思うでしょう。

Attach:FileSizeMonoDependency.png \\
''お分かりのように、Unity には、プレイヤー作成時、System.Xml.dll および System.dll が含まれます''

Unity には、プレイヤー配布 $$mscorlib.dll$$、$$Boo.Lang.dll$$、$$UnityScript.Lang.dll$$ および $$UnityEngine.dll$$ と共に、次の DLL が含まれます。
